Copyright	dvode_f90_m.f90	/^! Copyright (c) 2013$/
IF	dvode_f90_m.f90	/^        IF ((KFLAG<=-2) .AND. (ETA>ETAMXF)) ETA = /
PR_SR	modpk_deltaN.f90	/^    function PR_SR(phi_pivot,phi_end, spectrum) re/
bderivs_dvode	modpk_utils.f90	/^  subroutine bderivs_dvode(neq, t, y, ydot)$/
check	modpk_potential.f90	/^      call assert%check(size(vparams,1)>=2,__FILE_/
get_ic	modpk_sampling.f90	/^    subroutine get_ic(phi0, dphi0, &$/
heapsort	modpk_numerics.f90	/^    pure subroutine heapsort(table)$/
if	csv_file_1d.f90	/^    if ( present(advance) ) adv = advance$/
index	csv_file.f90	/^    k    = index( value,'"')$/
log	driver_modpk.f90	/^  kmin = log(5.d-4)$/
odeint_r	modpk_odeint.f90	/^  subroutine odeint_r(ystart,x1,x2,eps,h1,hmin,der/
open	multimodecode_driver.f90	/^	open(newunit=pfile, file="parameters_multimodecod/
output_file_open	modpk_io.f90	/^    subroutine output_file_open(self,ICs,SR)$/
penalized_constrained_montecarlo	modpk_NOTREADY.f90	/^    subroutine penalized_constrained_montecarlo(sa/
pot	modpk_potential.f90	/^  recursive function pot(phi) result(V_potential)$/
powerspectrum	modpk_odeint.f90	/^        call powerspectrum(qij, dqij, phi, delphi,/
raise_warning	modpk_errorhandling.f90	/^    subroutine raise_warning(self, msg, fname, lin/
selected_real_kind	modpk_modules.f90	/^  !INTEGER, parameter :: DP = selected_real_kind(3/
size	csv_file_2d.f90	/^    do i = 1,size(array,2)$/
taken	modpk_rng.f90	/^  !Some of this has been taken (where indicated) f/
vparams	modpk_qsf.f90	/^  !Function parameters passed here via vparams(4+,/
