!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
MP_and_horizcross	cosmology.py	/^    def MP_and_horizcross(self,  nmoduli, radius, m_avg=1.5e-5, dimn_weight=None):$/;"	m	class:SR_universe
PR	cosmology.py	/^    def PR(self, phi_hc, phi_end=phi_zero):$/;"	m	class:deltaN_model
SR_universe	cosmology.py	/^class SR_universe(deltaN_model):$/;"	c
V	cosmology.py	/^    def V(self,phi):$/;"	m	class:inflation_model
V_i	cosmology.py	/^    def V_i(self, phi):$/;"	m	class:inflation_model
V_i	potential.py	/^def V_i(phi, choice="Nquad",**params):$/;"	f
Z_i	cosmology.py	/^    def Z_i(self, phi_end=phi_zero):$/;"	m	class:deltaN_model
__init__	cosmology.py	/^    def __init__(self, HC_approx, **infl_args):$/;"	m	class:deltaN_model
__init__	cosmology.py	/^    def __init__(self, model, nfields):$/;"	m	class:inflation_model
__init__	cosmology.py	/^    def __init__(self, sampler=None, N_pivot=55.0, HC_approx=True, **infl_args):$/;"	m	class:SR_universe
alpha_s	cosmology.py	/^    def alpha_s(self, phi_hc, phi_end=phi_zero):$/;"	m	class:deltaN_model
beta_ratio_max	parameters.py	/^beta_ratio_max = 0.6$/;"	v
beta_ratio_min	parameters.py	/^beta_ratio_min = 0.4$/;"	v
beta_ratio_numb	parameters.py	/^beta_ratio_numb = 10$/;"	v
calc_observs	cosmology.py	/^    def calc_observs(self, phi_hc,phi_end=phi_zero, obs_to_calc=None):$/;"	m	class:deltaN_model
check_choice	potential.py	/^def check_choice(choice):$/;"	f
chunk	mpi_routines.py	/^def chunk(data,processes,group=True):$/;"	f
constant	cosmology.py	/^    def constant(self):$/;"	m	class:SR_universe
d2Ndphi2	cosmology.py	/^    def d2Ndphi2(self, phi_hc, phi_end=phi_zero):$/;"	m	class:deltaN_model
d2V	cosmology.py	/^    def d2V(self,phi):$/;"	m	class:inflation_model
d2Vdphi2	potential.py	/^def d2Vdphi2(phi,choice="Nquad",**params):$/;"	f
d3V	cosmology.py	/^    def d3V(self,phi):$/;"	m	class:inflation_model
d3Vdphi3	potential.py	/^def d3Vdphi3(phi,choice="Nquad",**params):$/;"	f
dNdphi	cosmology.py	/^    def dNdphi(self, phi_hc, phi_end=phi_zero):$/;"	m	class:deltaN_model
dV	cosmology.py	/^    def dV(self,phi):$/;"	m	class:inflation_model
dVdphi	potential.py	/^def dVdphi(phi,choice="Nquad",**params):$/;"	f
dZ_ij	cosmology.py	/^    def dZ_ij(self, phi_hc, phi_end=phi_zero):$/;"	m	class:deltaN_model
deltaN_model	cosmology.py	/^class deltaN_model(inflation_model):$/;"	c
eps_i	cosmology.py	/^    def eps_i(self, phi):$/;"	m	class:inflation_model
eta_i	cosmology.py	/^    def eta_i(self, phi):$/;"	m	class:inflation_model
f_NL	cosmology.py	/^    def f_NL(self, phi_hc, phi_end=phi_zero):$/;"	m	class:deltaN_model
fileroot	parameters.py	/^fileroot = "outdata"$/;"	v
fixed_bins	parameters.py	/^fixed_bins=True$/;"	v
fixed_range	parameters.py	/^fixed_range = [obs_range[obs] for obs in sorted(obs_to_calc)] #Sort bc in alphab order later$/;"	v
get_new_params	cosmology.py	/^    def get_new_params(self, **samp_params):$/;"	m	class:SR_universe
hist_estimate_pdf	processing.py	/^def hist_estimate_pdf(sample, observables=None, normed=True,$/;"	f
hyperparams	parameters.py	/^hyperparams = ['nfields', 'beta',$/;"	v
inflation_model	cosmology.py	/^class inflation_model:$/;"	c
init_parallel	mpi_routines.py	/^def init_parallel():$/;"	f
load_hist_dictionary	driver.py	/^    def load_hist_dictionary():$/;"	f	function:main
load_params	cosmology.py	/^    def load_params(self, **params):$/;"	m	class:inflation_model
load_sampler	cosmology.py	/^    def load_sampler(self, sampler):$/;"	m	class:SR_universe
m_avg	parameters.py	/^m_avg = 5e-7$/;"	v
main	driver.py	/^def main():$/;"	f
n_s	cosmology.py	/^    def n_s(self, phi_hc, phi_end=phi_zero):$/;"	m	class:deltaN_model
n_t	cosmology.py	/^    def n_t(self, phi_hc, phi_end=phi_zero):$/;"	m	class:deltaN_model
nbins	parameters.py	/^nbins = 20$/;"	v
nfields_max	parameters.py	/^nfields_max = 100$/;"	v
nfields_min	parameters.py	/^nfields_min = 50$/;"	v
nfields_unit	parameters.py	/^nfields_unit = 10$/;"	v
nsamples	parameters.py	/^nsamples=1e4$/;"	v
obs_range	parameters.py	/^obs_range = {'n_s': [0.88, 0.965],$/;"	v
obs_to_calc	parameters.py	/^obs_to_calc = ['n_s']$/;"	v
parse_commandline	driver.py	/^def parse_commandline():$/;"	f
phi_zero	cosmology.py	/^    phi_zero = None$/;"	v	class:deltaN_model
poss_observables	parameters.py	/^poss_observables = ['PR', 'n_s', 'alpha_s',$/;"	v
potential	potential.py	/^def potential(phi, choice="Nquad", **params):$/;"	f
r	cosmology.py	/^    def r(self, phi_hc, phi_end=phi_zero):$/;"	m	class:deltaN_model
remv_last3	driver.py	/^        def remv_last3(string):$/;"	f	function:parse_commandline
sample_Nquad	cosmology.py	/^    def sample_Nquad(self, obs_to_calc, nsamples, nmoduli, radius, m_avg, dimn_weight):$/;"	f
scale_nsamples	parameters.py	/^scale_nsamples = False$/;"	v
scott_rule	processing.py	/^def scott_rule(sample):$/;"	f
tau_NL	cosmology.py	/^    def tau_NL(self, phi_hc, phi_end=phi_zero):$/;"	m	class:deltaN_model
xi_i	cosmology.py	/^    def xi_i(self, phi):$/;"	m	class:inflation_model
